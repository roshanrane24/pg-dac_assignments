Java EE
Day 1
0. MANDATORY reading H.W
Refer to : day1-data\day1_help\web_prog_prerequisites\web basics\
HTTP Basics n web server basics 
(It will help you in understanding web programming in Java)

1. import day1.1 , in your newly created JavaEE workspace
1.1 Fix build path.
1.2 Edit DB username n password
1.3 Revise DBUtils n testing of Statement n PreparedStatement.

2. import day1.2 . Revise layered application completely.


3. Refer to "topics-tutorials diagram"
3.1 Refer to "JavaEE\day1-data\day1_help\jdbc help\sql\topics-tutorials.txt"
Copy DDL n DML for : users , topics n tutorials table.


Solve with help of the lab faculty :
Create new java project : day1_lab n copy earlier DBUtils.
Solve  
1. User Login
i/p : email ,password
o/p :Return User details in case of successful login or an error  message, in case of invalid login.
Steps
1.1  Create User POJO 
with propeties mapping to 
id | name    | email          | password | reg_amt | reg_date   | role
Add default constructor n all getters n setters n toString

1.2 IUserDao : i/f
User authenticateUser(String email,String pwd) throws SQLException

1.3 UserDaoImpl imple IUserDao
1. state : cn , pst1
2. def ctor : get cn from utils , create pst1: sql 
3. CRUD method :
set IN params, execQuery ---> RST --> if(rst.next()) ---> return new User(.....);//fetch COMPLETE user details.
otherwise null.
4. clean up : pst close, cn close

1.4 Tester : scanner , dao instnance --invoke dao method --cleanup 

2. Change password
i/p : email ,password , new password
o/p : A message indicating success or failure.

1.2 IUserDao : i/f
User authenticateUser(String email,String pwd) throws SQLException
String changePassword(email ,password , new password) throws SQLException

1.3 In imple class
Add pst2 in state 
Wrap update query in pst2
Close pst2 from cleanup.
Method : set 3 IN params .
Invoke executeUpdate --chk update count --return the mesg accordingly.


3. Get all available topics.
3.1 Table : topics
3.2 POJO : Topic
3.3 ITopicDao : i/f
List<Topic> getAllTopics() throws SE.


Day 2
1. Confirm if web server (tomcat) is added to your Java EE workspace n is it running fine.

2. Create dynamic web project n add index.html , under <webapp> . Deploy web application n test it using multiple web browsers.

3. Complete pending work from Day1

4. Execute stored function .
Refer : day1-data\day1_help\jdbc help\sql\sql cmds.txt
Search for : update_account_fn
Add this stored function in DB.

4.1 Create new java project(NO web project!) .
Test this stored function , in layered manner.
Tester--DAO(using DBUtils) --POJO --DB
In DAO implementation class 
DAO's ctor :
cst=cn.prepareCall("?=call update_account_fn(?,?,?)");
cst.registerOutParameter(1,Types.DOUBLE);

CRUD method
set IN params : 3
cst.execute();

cst.getDouble(1) => updated dest bal.


5. Continue with day1_lab project or copy it day2_lab(java project)

Keep Data access layer for the case study (Content Management system) ready , for customer role.
refer : day2-data\day2_help\case studies\ContentManagementSystem

MUST be done using layered architecture.

5.1 Display all available tutorial names , under selected topic , sorted as per visits , in desc order.
i/p : topic id
o/p : List<String> => tutorial names !

Steps 
1. DB tables : tutorials
2. POJO : Tutorial
properties : id | name | author | publish_date | visits | contents | topic_id |
add 
private int topicId ; //FK => working closely with DB ..not yet completely in object world!
3. ITutorialDao
List<String> getAllTutorialNamesByTopic(int topicId) throws SE;
4. imple class

5.2 Display selected  tutorial details by name
i/p : tutorial name 
o/p : tutorial details (Tutorial)

5.3 Update visits 
i/p tutorial id
o/p updated visit count or error mesg

Reading H.W : Go through "readme Java EE" till servlets (at least!!)


Day 3

Please follow this exact sequence in today's lab , for complete revision n clarity.

Refer to today's sequence.txt , diagrams , readmes for better understanding n revise.

NOTE : Use web browser's inspect option , to trace request response flow.

Steps
1. Create a new dynamic web project (check web.xml checkbox) : eg day3_lab

1.1 Create a welcome page : index.html
Add a link : to invoke the servlet (which will be deployed using @WebServlet annoatation)

1. Request URL  sent from clnt --> server, after clicking of the link
http://host:port/day3_lab/test1
URI : /day3_lab/test1
URL Pattern : /test1


Create FirstServlet.java , override life cycle methods & trace the life cycle.
Use @WebServlet annoatation
Use lazy loading policy.

1.2 Add another link in index.html : to invoke the servlet (which will be deployed using xml tags)

Create SecondServlet.java , override life cycle methods & trace the life cycle.
Do NOT Use @WebServlet annoatation , instead add xml tags in web.xml
Use eager loading policy.


1.3 Add / in anchor tag's href. Observe n conclude
URL : http://localhost:9090/test1
Resp : HTTP 404 (due to missing ctx path)


1.4 Remove / from the url-pattern . Observe n conclude
Obs : Tomcat server may start or not  ---BUT web app will NOT get deployed --WC throws exc : IllegalArgumentExc : invalid URL pattern (i.e MUST contain leading /)


1.5 Give same url-pattern to both of these servlets . Observe n conclude
You CAN NOT supply SAME url-pattern to multiple servlets ---causes ambiguity --WC throws exc : IllegalArgumentExc : can't configure multiple servlets to the same url-pattern


1.6 Can one servlet be deployed under multiple url patterns ? ??? YESS


1.7 Add a new link in index.html : for User Login
Copy login.html from day2-data\day2_help\HTML pages\login.html under webapp(i.e context root of the web application)
Write a LoginServlet 
override init , doPost n destroy , as discussed already.
Check user authentication.

In case of successful login , check the role of the user .
In case of customer login , redirect client to TopicsServlet n display a message "Customer Login Successful"

In case of admin login , redirect client to AdminServlet n display a message "Admin Login Successful"
Steps
1. Copy utils , pojo, dao from earlier project.
2. LoginServlet
2.1 override : init , destory , doPost
2.2 init : create user dao instance , using centralized exc handling
2.3 destroy : invoke dao's cleanup 
2.4 doPost 
set cont type 
get PW
read req params : request.getParameter(name) ---> value : email n pwd
invoke dao's CRUD method
in case of failure ---> null => send retry link with err mesg
in case of success -->continue to authorization --> getRole --"ADMIN" => response.sendRedirect("admin"); --> AdminServlet --welcome mesg for admin.

getRole --CUSTOMER --response.sendRedirect("topics"); --> TopicsServlet --welcome mesg fro customer


2. Complete pending work.
(MUST complete TopicDao n TutorialDao implementations)

Day 4
1. import day4.1 project in your workspace , to revise cookie based session tracking.

2. import day4.2 project in your workspace , to revise HttpSession based session tracking.

3. import day4_cms project in your workspace , to revise continuation of a case study.

4. Continue with day4_cms or create your own.
With the help of lab faculty , 
4.1 Refer to case study page flow n try to complete Tutorials Page (a servlet) 
URL : 
eg : http://localhost:9090/day4_cms/tutorials?topic_id=1

In doGet of TutorialsServlet
1. set content type
2. get PW
3. Get HttpSession
4. Get selected topic id from request parameter n parse it
eg :  int topicId=Integer.parseInt(request.getParameter("topic_id"));
5. invoke tut dao's method n get list of all tut names published under a chosen topic
List<String> getAllTutorialNamesByTopic(int topicId) 
6. Attach for-each n generate links (NO dynamic form generation!!!!!!)
eg : for(String s : tutNames)
 pw.print("<a href='tutorial_details?tutName="+s+"'>"+s+"</a>");

7. Test it n then proceed to the next page.

4.2 Try to complete tutorial details page also.

Day 5
1. import day5_cms n revise complete flow along with servlet concepts.

2. import day5.2 , to revise server Pull (RD's forward)

3. 2. import day5.3 , to revise server Pull (RD's include)

I will be sending you list of important readmes n diagrams to refer.

Please revise servlet life cycle completely , we will continue with the same on Monday.

Day 6
1. import day6_cms , to revise ServletConfig n init-params , to create DB independent web app.

2. import config_vs_ctx , to revise ServletContext n context params n web app listeners

3. import day6_jsp , to trace JSP life cycle n API 
Do look at translated page (eg : index_jsp.java, in you workspace)

4. Complete pending work.

